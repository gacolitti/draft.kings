[{"path":"https://gacolitti.github.io/draft.kings/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Giovanni Colitti Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gacolitti.github.io/draft.kings/articles/contests.html","id":"understanding-draftkings-contests","dir":"Articles","previous_headings":"","what":"Understanding DraftKings Contests","title":"Contests","text":"DraftKings popular daily fantasy sports platform offers wide variety contests across multiple sports. contests allow users draft virtual teams real players compete users prizes. vignette guide using draft.kings package interact DraftKings contests programmatically.","code":""},{"path":"https://gacolitti.github.io/draft.kings/articles/contests.html","id":"types-of-contests","dir":"Articles","previous_headings":"Understanding DraftKings Contests","what":"Types of Contests","title":"Contests","text":"DraftKings offers wide variety contest types, including: Guaranteed Prize Pools (GPPs): Large tournaments fixed prize pools. Head--Head: Contests two players. 50/50s: Contests top half entries win. Double-Ups: Similar 50/50s, winners double entry fee. Leagues: Smaller contests set number entries. Showdown: Single-game contests focusing one specific matchup. Tiers: Contests players grouped tiers, select one tier. Classic: Traditional salary cap-based contests across multiple games. -Game Showdown: Live contests start game begun. Best Ball: Season-long contests automated lineup optimization. Step Tournaments: Multi-stage contests winners advance higher levels. Beginner Contests: Restricted newer players platform. Satellites Qualifiers: Contests award entries larger tournaments. contest type strategy appeal different players. draft.kings package provides tools interact analyze various contest types.","code":""},{"path":"https://gacolitti.github.io/draft.kings/articles/contests.html","id":"key-concepts","dir":"Articles","previous_headings":"Understanding DraftKings Contests","what":"Key Concepts","title":"Contests","text":"diving functions, ’s important understand key concepts: Contest Key: unique identifier contest. Draft Group: set players available drafting particular contest set contests. Draft Group ID: unique identifier draft group. draft.kings package provides functions interact elements, allowing fetch contest information, player data, . Let’s explore functions .","code":""},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/articles/contests.html","id":"dk_get_lobby_contests","dir":"Articles","previous_headings":"Contest Details","what":"dk_get_lobby_contests()","title":"Contests","text":"List contests Draft Kings lobby dk_get_lobby_contests() function retrieves information available contests DraftKings lobby. Note: contest key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678.","code":"contests <- dk_get_lobby_contests() contests |>    dplyr::select(contest_key, name, game_type, entry_fee, entries, maximum_entries_per_user) |>   head(5) #> # A tibble: 5 × 6 #>   contest_key name            game_type entry_fee entries maximum_entries_per_…¹ #>         <dbl> <chr>           <chr>         <dbl>   <dbl>                  <dbl> #> 1   164120435 NFL $4M Fantas… Classic           5  230118                    150 #> 2   164284870 NFL $2.5M Thur… Showdown…        15   18286                    150 #> 3   164120427 NFL $2.5M Fant… Classic         100    3776                    150 #> 4   163439930 NFL $4M MEGA M… Classic        4444     148                     30 #> 5   166019750 MLB $2M MEGA M… Classic        3333      66                     20 #> # ℹ abbreviated name: ¹​maximum_entries_per_user"},{"path":"https://gacolitti.github.io/draft.kings/articles/contests.html","id":"dk_get_contest_info","dir":"Articles","previous_headings":"Contest Details","what":"dk_get_contest_info()","title":"Contests","text":"Get detailed contest info contest key dk_get_contest_info() function provides detailed information specific contest compared dk_get_lobby_contests(). dk_get_lobby_contests() gives overview multiple contests, dk_get_contest_info() focuses single contest -depth details.","code":"dk_get_contest_info(contest_key = 133645678) |>    dplyr::select(contest_summary, payout_description, sport, entry_fee, entries, maximum_entries) #> # A tibble: 1 × 6 #>   contest_summary     payout_description sport entry_fee entries maximum_entries #>   <chr>               <chr>              <chr>     <dbl>   <dbl>           <dbl> #> 1 This 215-player co… $5,000             NFL          27     215             215"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"understanding-draft-groups","dir":"Articles","previous_headings":"","what":"Understanding Draft Groups","title":"Draft Groups","text":"Draft groups fundamental concept DraftKings’ daily fantasy sports platform. represent collection players available selection specific contest set contests. Understanding draft groups crucial effectively participating DraftKings contests utilizing draft.kings package. Key aspects draft groups include: Player Pool: draft group contains specific set players contestants can build lineups. Salary Cap: Draft groups typically salary cap, limiting total “cost” players can selected lineup. Positions: Players draft group categorized positions, vary depending sport. Contest Association: draft group linked one contests. Multiple contests may share draft group. Sport Game Type: Draft groups sport-specific may categorized game type (e.g., classic, showdown). Start Time: draft group specific start time, usually corresponding start first game included contests. Player Information: Draft groups contain detailed information player, including salary, team, projected points. Roster Requirements: draft group specific roster requirements, number players drafted position limits. draft.kings package provides several functions interact analyze draft groups, allowing users retrieve draft group information, player lists, relevant data strategic lineup construction contest analysis.","code":""},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_lobby_draft_groups","dir":"Articles","previous_headings":"Draft Groups in Lobby","what":"dk_get_lobby_draft_groups()","title":"Draft Groups","text":"List draft groups Draft Kings lobby dk_get_lobby_draft_groups() function retrieves information available draft groups DraftKings lobby. draft group represents set players available drafting particular contest set contests. function can used get overview current draft groups across different sports.","code":"draft_groups <- dk_get_lobby_draft_groups() draft_groups |>    dplyr::select(draft_group_id, game_type, sport, start_date, game_count) |>   head(5) #> # A tibble: 5 × 5 #>   draft_group_id game_type sport start_date                   game_count #>            <dbl> <lgl>     <chr> <chr>                             <dbl> #> 1         105573 NA        NFL   2024-09-06T00:20:00.0000000Z         16 #> 2         109136 NA        NFL   2024-09-08T17:00:00.0000000Z         12 #> 3         112445 NA        SOC   2024-09-02T01:05:00.0000000Z          1 #> 4         112446 NA        SOC   2024-09-04T19:00:00.0000000Z          3 #> 5         112460 NA        NBA   2024-09-03T23:00:00.0000000Z          4"},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_draft_group","dir":"Articles","previous_headings":"Draft Group Info","what":"dk_get_draft_group()","title":"Draft Groups","text":"Get detailed draft group info draft group ID dk_get_draft_group() function provides detailed information specific draft group. includes data sport, game type, start time, various rules settings draft group. can use either draft group ID directly provide contest key, function automatically retrieve corresponding draft group ID.","code":"dk_get_draft_group(draft_group_id = 75284) |>    dplyr::select(draftable_id, display_name, player_id, salary, position, status, team_abbreviation, team_id, competition_id, competition_name, competition_start_time) #> # A tibble: 106 × 11 #>    draftable_id display_name  player_id salary position status team_abbreviation #>           <dbl> <chr>             <dbl>  <dbl> <chr>    <chr>  <chr>             #>  1     24633208 Lamar Jackson    877745  18300 QB       None   BAL               #>  2     24633209 Ja'Marr Chase   1109979  16500 WR       None   CIN               #>  3     24633210 Joe Burrow       878785  15900 QB       None   CIN               #>  4     24633211 Mark Andrews     820699  14400 TE       None   BAL               #>  5     24633212 Joe Mixon        820727  13200 RB       None   CIN               #>  6     24633213 Tee Higgins      978579  12300 WR       None   CIN               #>  7     24633261 Lamar Jackson    877745  12200 QB       None   BAL               #>  8     24633262 Ja'Marr Chase   1109979  11000 WR       None   CIN               #>  9     24633263 Joe Burrow       878785  10600 QB       None   CIN               #> 10     24633214 J.K. Dobbins     976513  10500 RB       None   BAL               #> # ℹ 96 more rows #> # ℹ 4 more variables: team_id <dbl>, competition_id <dbl>, #> #   competition_name <chr>, competition_start_time <chr>"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_draft_group_info","dir":"Articles","previous_headings":"Draft Group Info","what":"dk_get_draft_group_info()","title":"Draft Groups","text":"Get draft group info dk_get_draft_group_info() function provides different set information compared dk_get_draft_group(). dk_get_draft_group() focuses player-specific data within draft group, dk_get_draft_group_info() offers higher-level overview draft group associated game information. Key differences include: Structure: dk_get_draft_group_info() returns list three main components: info, games, leagues. Draft Group Details: provides overall draft group information sport_id, start_time_suffix, draft_group_state, game_type. Game Information: Unlike dk_get_draft_group(), includes detailed game data like location, time_remaining_status, sport-specific scores. League Data: also includes league-specific information present dk_get_draft_group(). function particularly useful need broader context draft group, associated games, league, rather individual player details. ’s example use function:","code":"dgi <- dk_get_draft_group_info(draft_group_id = 75284)  info <- dgi$info games <- dgi$games leagues <- dgi$leagues  info |> dplyr::select(sport, start_time_suffix, draft_group_state, game_type) #> # A tibble: 1 × 4 #>   sport start_time_suffix draft_group_state game_type #>   <chr> <chr>             <chr>             <chr>     #> 1 NFL   \" (CIN vs BAL)\"   Historical        SalaryCap games |> dplyr::select(game_id, away_team_id, home_team_id, start_date, location) #> # A tibble: 1 × 5 #>   game_id away_team_id home_team_id start_date                   location        #>     <int>        <int>        <int> <chr>                        <chr>           #> 1 5819761          327          366 2022-10-10T00:20:00.0000000Z M&T Bank Stadi… leagues |> dplyr::select(league_id, league_name, league_abbreviation) #> # A tibble: 1 × 3 #>   league_id league_name              league_abbreviation #>       <int> <chr>                    <chr>               #> 1         1 National Football League NFL"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_draft_group_info2","dir":"Articles","previous_headings":"Draft Group Info","what":"dk_get_draft_group_info2()","title":"Draft Groups","text":"Get draft group info dk_get_draft_group_info2() function provides information compared dk_get_draft_group_info(). Key differences include: dk_get_draft_group_info(): 3 components (info, games, leagues) dk_get_draft_group_info2(): 6 components (draft_groups, game_types, game_styles, sports, competitions, competition_attributes) Detailed game-specific data like scores quarter information draft group details (e.g., sort_order, game_set_key) Separate game_types game_styles components Detailed sports data Expanded competition information (e.g., weather, venue) Competition attributes dk_get_draft_group_info2() particularly useful : - Analyzing contest rules formats - Accessing detailed sport competition attributes - Obtaining weather venue information Example usage:","code":"dgi2 <- dk_get_draft_group_info2(draft_group_id = 75284)   dgi2 |> names() #> [1] \"draft_groups\"           \"game_types\"             \"game_styles\"            #> [4] \"sports\"                 \"competitions\"           \"competition_attributes\"  dgi2$draft_groups |>    dplyr::select(draft_group_id, contest_type_id, draft_group_state, min_start_time, max_start_time) #> # A tibble: 1 × 5 #>   draft_group_id contest_type_id draft_group_state min_start_time max_start_time #>            <int>           <int> <chr>             <chr>          <chr>          #> 1          75284              96 Historical        2022-10-10T00… 2022-10-10T00…  dgi2$competitions |>    dplyr::select(competition_id, name, start_time, venue, weather_icon) #> # A tibble: 1 × 5 #>   competition_id name      start_time                   venue       weather_icon #>            <int> <chr>     <chr>                        <chr>       <chr>        #> 1        5819761 CIN @ BAL 2022-10-10T00:20:00.0000000Z M&T Bank S… clear-night"},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_player_list","dir":"Articles","previous_headings":"Player and Team Data","what":"dk_get_player_list()","title":"Draft Groups","text":"Get list players draft group dk_get_player_list() function retrieves detailed list players available drafting specific draft group. function similar dk_get_draft_group() useful analyzing player pool, understanding salary constraints, making informed decisions building lineups. ’s breakdown function provides: Player details: Names, positions, team affiliations Fantasy-relevant information: Salary, projected points, recent performance Game-specific data: Opponent, game time, location Additional metadata: Player IDs, roster slot IDs, status information particularly useful : - Conducting pre-draft research - Identifying value picks based salary projected points - Analyzing matchups game conditions - Building optimized lineups within salary constraints Let’s examine output:","code":"dk_get_player_list(draft_group_id = 75284) |>    dplyr::select(player_id, first_name, last_name, position, salary, points_per_game, own_rate, is_swappable, in_play_contest, pp, injury_status) #> # A tibble: 53 × 11 #>    player_id first_name last_name position salary points_per_game own_rate #>        <dbl> <chr>      <chr>     <chr>     <dbl> <chr>              <dbl> #>  1    877745 Lamar      Jackson   QB        12200 23.1                  20 #>  2   1109979 Ja'Marr    Chase     WR        11000 17.4                   9 #>  3    878785 Joe        Burrow    QB        10600 16.3                   3 #>  4    820699 Mark       Andrews   TE         9600 12.6                  30 #>  5    820727 Joe        Mixon     RB         8800 15.9                  13 #>  6    978579 Tee        Higgins   WR         8200 12.0                   9 #>  7    976513 J.K.       Dobbins   RB         7000 11.7                  13 #>  8   1108208 Rashod     Bateman   WR         6400 4.7                   20 #>  9    742387 Tyler      Boyd      WR         6200 8.8                    9 #> 10    913163 Tyler      Huntley   QB         6000 5.1                   20 #> # ℹ 43 more rows #> # ℹ 4 more variables: is_swappable <lgl>, in_play_contest <lgl>, pp <dbl>, #> #   injury_status <chr>"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_team_list","dir":"Articles","previous_headings":"Player and Team Data","what":"dk_get_team_list()","title":"Draft Groups","text":"Get list teams draft group dk_get_team_list() function retrieves information teams participating specific draft group. function useful understanding team composition within contest can provide valuable context player selection matchup analysis. ’s function typically provides: Team identifiers: Team IDs abbreviations Game-specific information: Home/away status, opponent Team metadata: Full team names, locations information particularly useful : - Analyzing team matchups - Identifying home away teams - Cross-referencing team data player information Let’s examine output:","code":"dk_get_team_list(draft_group_id = 75284) |>    dplyr::select(home_team_abbreviation, away_team_abbreviation, competition_start_time, game_status) #> # A tibble: 1 × 4 #>   home_team_abbreviation away_team_abbreviation competition_start_time #>   <chr>                  <chr>                  <dttm>                 #> 1 BAL                    CIN                    2022-10-09 20:20:00    #> # ℹ 1 more variable: game_status <chr>"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_player_fp","dir":"Articles","previous_headings":"Player and Team Data","what":"dk_get_player_fp()","title":"Draft Groups","text":"Get player fantasy points earned dk_get_player_fp() function retrieves fantasy points earned players specific sport, season, timeframe. Data starts October 18th, 2022 NBA.","code":"# `timeframe` represents the week of the season for NFL dk_get_player_fp(sport = \"nfl\", season = 2023, timeframe = 10) |>   dplyr::select(player_id, first_name, last_name, team_id, position, salary, fantasy_points, competition_id, points, sport) #> # A tibble: 286 × 10 #>    player_id first_name last_name    team_id position salary fantasy_points #>        <dbl> <chr>      <chr>          <dbl> <chr>     <dbl>          <dbl> #>  1    557210 Keenan     Allen            357 WR         8800           43.5 #>  2   1062020 CeeDee     Lamb             331 WR         8500           42.5 #>  3    591816 Dak        Prescott         331 QB         6700           41.9 #>  4    607864 Brandin    Cooks            331 WR         4200           35.3 #>  5   1127106 Amon-Ra    St. Brown        334 WR         8300           33.5 #>  6    923915 T.J.       Hockenson        347 TE         5000           33.4 #>  7    910562 Justin     Herbert          357 QB         7700           32.4 #>  8    973966 Brian      Robinson Jr.     363 RB         5400           30.7 #>  9    593587 Mike       Evans            362 WR         7200           29.3 #> 10   1168245 Sam        Howell           363 QB         5900           28.2 #> # ℹ 276 more rows #> # ℹ 3 more variables: competition_id <dbl>, points <dbl>, sport <chr>"},{"path":"https://gacolitti.github.io/draft.kings/articles/draftgroups.html","id":"dk_get_competitions","dir":"Articles","previous_headings":"Player and Team Data","what":"dk_get_competitions()","title":"Draft Groups","text":"Get competitions associated draft group dk_get_competitions() function retrieves detailed information competitions associated specific draft group.","code":"dk_get_competitions(draft_group_id = 75284) |>    dplyr::select(competition_id, start_time, home_team_team_name, away_team_team_name, sport, competition_state) #> # A tibble: 1 × 6 #>   competition_id start_time        home_team_team_name away_team_team_name sport #>            <int> <chr>             <chr>               <chr>               <chr> #> 1        5819761 2022-10-10T00:20… Ravens              Bengals             NFL   #> # ℹ 1 more variable: competition_state <chr>"},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/articles/leaderboard.html","id":"dk_get_leaderboard","dir":"Articles","previous_headings":"Analyzing Contest Results and Rankings","what":"dk_get_leaderboard()","title":"Leaderboard & Entries","text":"Get player leaderboard information particular contest dk_get_leaderboard() function retrieves comprehensive information participants performance specific DraftKings contest. includes: list entries contest Fantasy points scored entry User information associated entry Current rank entry Winnings () entry data allows -depth analysis contest results, participant performance, payout distributions. ’s particularly useful understanding successful strategies, identifying top users, gaining insights contest dynamics. Note: functions dk_get_leaderboard() dk_get_entries() require authentication via DraftKings session cookies. can provided either setting DK_IV DK_JWE environment variables, passing directly functions using iv jwe arguments.","code":"dk_get_leaderboard(contest_key = 133645678)  #> # A tibble: 215 × 21 #>    draft_group_id contest_key entry_key  lineup_id user_name    user_key #>             <int> <chr>       <chr>          <int> <chr>        <chr>    #>  1          75284 133645678   3412356478        -1 GenoMike21   642864   #>  2          75284 133645678   3416201807        -1 carlitosway9 1334845  #>  3          75284 133645678   3416313295        -1 KidRaider3   5752908  #>  4          75284 133645678   3416410911        -1 carlosking89 8636059  #>  5          75284 133645678   3416034618        -1 sjamo35      8672865  #>  6          75284 133645678   3416642033        -1 Jace2013     11763756 #>  7          75284 133645678   3416680035        -1 Bucknutz00   417423   #>  8          75284 133645678   3415573084        -1 JWolff33     13692689 #>  9          75284 133645678   3416580244        -1 eracnrobert  2374855  #> 10          75284 133645678   3415480406        -1 Maria2199    3405766  #> # ℹ 205 more rows #> # ℹ 15 more variables: user_entry_count <int>, user_entry_index <int>, #> #   time_remaining <int>, time_remaining_unit <chr>, max_time_remaining <int>, #> #   time_remaining_opponent <int>, rank <int>, fantasy_points <dbl>, #> #   fantasy_points_opponent <dbl>, user_name_opponent <chr>, #> #   number_tickets_won <int>, tickets_value <int>, winning_value <int>, #> #   winnings <list>, scoring_precision <int>"},{"path":"https://gacolitti.github.io/draft.kings/articles/leaderboard.html","id":"dk_get_entries","dir":"Articles","previous_headings":"Analyzing Contest Results and Rankings","what":"dk_get_entries()","title":"Leaderboard & Entries","text":"Get entries contest Retrieve detailed information specific entry rosters contest, including: complete drafted roster entry Detailed statistics every player entry’s roster Fantasy points earned statistical category Performance breakdowns scoring details late swap substitution information Entry metadata entry fees, potential winnings, current ranking function provides deep dive composition performance individual contest entries, allowing analysis roster strategies player contributions. Note: entry key numeric (character) key corresponds specific entry specific contest. See output dk_get_leaderboard().","code":"dk_get_entries(draft_group_id = 80584, entry_keys = c(3618408508, 3618897002)) #> # A tibble: 76 × 29 #>    contest_key entry_key  user_key draft_group_id lineup_id first_name last_name #>    <chr>       <chr>      <chr>             <int>     <int> <chr>      <chr>     #>  1 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  2 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  3 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  4 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  5 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  6 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  7 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  8 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  9 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #> 10 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #> # ℹ 66 more rows #> # ℹ 22 more variables: short_name <chr>, display_name <chr>, #> #   roster_position_id <int>, roster_position <chr>, #> #   roster_position_sort_order <int>, e_tag <chr>, percent_drafted <dbl>, #> #   draftable_id <int>, score <dbl>, stats_description <chr>, #> #   time_remaining_unit <chr>, time_remaining <int>, max_time_remaining <int>, #> #   percent_drafted_cp <chr>, player_deep_link <chr>, …"},{"path":"https://gacolitti.github.io/draft.kings/articles/optimization.html","id":"understanding-lineup-optimization","dir":"Articles","previous_headings":"","what":"Understanding Lineup Optimization","title":"Lineup Optimization","text":"Lineup optimization crucial piece daily fantasy sports (DFS) involves selecting best possible combination players within given constraints maximize potential points. process particularly important DFS platforms like DraftKings, participants must create lineups specific rules salary caps. Key aspects lineup optimization DFS include: Salary Cap Management: Balancing high-value players budget-friendly options stay within allocated salary cap. Position Requirements: Fulfilling specific position quotas required contest rules (e.g., 1 QB, 2 RBs, 3 WRs NFL contests). Player Projections: Utilizing accurate projections player performance, can based historical data, recent form, matchups, relevant factors. draft.kings package provides tools streamline optimization process, allowing users leverage DraftKings’ data perform lineup optimization programmatically. default, optimization uses Draft Kings player point projections, can pass player point projections. NFL NBA contest types supported currently.","code":""},{"path":"https://gacolitti.github.io/draft.kings/articles/optimization.html","id":"prepare-schematic","dir":"Articles","previous_headings":"Understanding Lineup Optimization","what":"Prepare schematic","title":"Lineup Optimization","text":"perform optimization must first prepare schematic. schematic contains necessary information perform optimization including contest type, set players, rules, expected player points.","code":"schematic <- dk_prepare_schematic(draft_group_id = 80584) dplyr::glimpse(schematic) #> List of 3 #>  $ draft_group   : tibble [106 × 27] (S3: tbl_df/tbl/data.frame) #>   ..$ draftable_id          : num [1:106] 26368922 26368923 26368924 26368925 26368926 ... #>   ..$ first_name            : chr [1:106] \"Josh\" \"Tyreek\" \"Stefon\" \"Tua\" ... #>   ..$ last_name             : chr [1:106] \"Allen\" \"Hill\" \"Diggs\" \"Tagovailoa\" ... #>   ..$ display_name          : chr [1:106] \"Josh Allen\" \"Tyreek Hill\" \"Stefon Diggs\" \"Tua Tagovailoa\" ... #>   ..$ short_name            : chr [1:106] \"J. Allen\" \"T. Hill\" \"S. Diggs\" \"T. Tagovailoa\" ... #>   ..$ player_id             : num [1:106] 868199 823156 694041 973947 592195 ... #>   ..$ player_dk_id          : num [1:106] 11370 11477 17102 468529 18260 ... #>   ..$ position              : chr [1:106] \"QB\" \"WR\" \"WR\" \"QB\" ... #>   ..$ roster_slot_id        : num [1:106] 511 511 511 511 511 511 511 512 511 511 ... #>   ..$ salary                : num [1:106] 18600 16500 15900 15600 14100 13500 13200 12400 12000 11700 ... #>   ..$ status                : chr [1:106] \"None\" \"None\" \"None\" \"None\" ... #>   ..$ is_swappable          : logi [1:106] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_disabled           : logi [1:106] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ news_status           : chr [1:106] \"Recent\" \"Recent\" \"Recent\" \"Recent\" ... #>   ..$ player_image50        : chr [1:106] \"https://dkn.gs/sports/images/nfl/players/50/11370.png\" \"https://dkn.gs/sports/images/nfl/players/50/11477.png\" \"https://dkn.gs/sports/images/nfl/players/50/17102.png\" \"https://dkn.gs/sports/images/nfl/players/50/468529.png\" ... #>   ..$ player_image160       : chr [1:106] \"https://dkn.gs/sports/images/nfl/players/160/11370.png\" \"https://dkn.gs/sports/images/nfl/players/160/11477.png\" \"https://dkn.gs/sports/images/nfl/players/160/17102.png\" \"https://dkn.gs/sports/images/nfl/players/160/468529.png\" ... #>   ..$ alt_player_image50    : chr [1:106] \"\" \"\" \"\" \"\" ... #>   ..$ alt_player_image160   : chr [1:106] \"\" \"\" \"\" \"\" ... #>   ..$ team_id               : num [1:106] 324 345 324 345 345 345 345 324 345 345 ... #>   ..$ team_abbreviation     : chr [1:106] \"BUF\" \"MIA\" \"BUF\" \"MIA\" ... #>   ..$ player_game_hash      : chr [1:106] \"868199-5819869\" \"823156-5819869\" \"694041-5819869\" \"973947-5819869\" ... #>   ..$ competition_id        : num [1:106] 5819869 5819869 5819869 5819869 5819869 ... #>   ..$ competition_name      : chr [1:106] \"MIA @ BUF\" \"MIA @ BUF\" \"MIA @ BUF\" \"MIA @ BUF\" ... #>   ..$ competition_start_time: chr [1:106] \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" ... #>   ..$ exp_fp                : num [1:106] 39 36.9 24.3 26.5 -0.3 ... #>   ..$ is_captain            : logi [1:106] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..$ row_number            : int [1:106] 1 2 3 4 5 6 7 8 9 10 ... #>  $ rules         : tibble [1 × 26] (S3: tbl_df/tbl/data.frame) #>   ..$ game_type_id                  : int 96 #>   ..$ game_type_name                : chr \"Showdown Captain Mode\" #>   ..$ game_type_description         : chr \"Create your team from 1 game, while staying under the $50,000 salary cap\" #>   ..$ lineup_configuration_id       : int 81 #>   ..$ unique_players                : logi TRUE #>   ..$ allow_late_swap               : logi FALSE #>   ..$ error_status                  : logi NA #>   ..$ rules_url                     : chr \"/help/rules/1/96\" #>   ..$ draft_type                    : chr \"SalaryCap\" #>   ..$ allowed_competition_attributes: logi NA #>   ..$ scoring_divider               : logi NA #>   ..$ use_optimal_lineups           : logi FALSE #>   ..$ supports_players_tab          : logi FALSE #>   ..$ show_bye_week_info            : logi FALSE #>   ..$ original_draft_type           : logi NA #>   ..$ is_season_long                : logi FALSE #>   ..$ team_position_limits          : logi NA #>   ..$ salary_cap_is_enabled         : logi TRUE #>   ..$ salary_cap_min_value          : int 0 #>   ..$ salary_cap_max_value          : int 50000 #>   ..$ game_count_is_enabled         : logi FALSE #>   ..$ game_count_min_value          : logi NA #>   ..$ game_count_max_value          : logi NA #>   ..$ team_count_is_enabled         : logi TRUE #>   ..$ team_count_min_value          : int 2 #>   ..$ team_count_max_value          : logi NA #>  $ draft_group_id: num 80584 #>  - attr(*, \"class\")= chr [1:2] \"showdown_captain_mode\" \"list\""},{"path":"https://gacolitti.github.io/draft.kings/articles/optimization.html","id":"perform-optimization","dir":"Articles","previous_headings":"Understanding Lineup Optimization","what":"Perform optimization","title":"Lineup Optimization","text":"Pass schematic object optimization function:","code":"optimal_lineup <- dk_optimize_lineup(schematic)"},{"path":"https://gacolitti.github.io/draft.kings/articles/optimization.html","id":"extract-solution","dir":"Articles","previous_headings":"Understanding Lineup Optimization","what":"Extract solution","title":"Lineup Optimization","text":"Finally, extract solution solved model object:","code":"dk_extract_solution(optimal_lineup) |> dplyr::glimpse() #> List of 4 #>  $ optimal_lineup:'data.frame':  6 obs. of  26 variables: #>   ..$ draftable_id          : num [1:6] 26368922 26368976 26368982 26368990 26368996 ... #>   ..$ first_name            : chr [1:6] \"Josh\" \"Tyreek\" \"Raheem\" \"James\" ... #>   ..$ last_name             : chr [1:6] \"Allen\" \"Hill\" \"Mostert\" \"Cook\" ... #>   ..$ display_name          : chr [1:6] \"Josh Allen\" \"Tyreek Hill\" \"Raheem Mostert\" \"James Cook\" ... #>   ..$ short_name            : chr [1:6] \"J. Allen\" \"T. Hill\" \"R. Mostert\" \"J. Cook\" ... #>   ..$ player_id             : num [1:6] 868199 823156 606501 1131012 821895 ... #>   ..$ player_dk_id          : num [1:6] 11370 11477 19614 640895 14871 ... #>   ..$ position              : chr [1:6] \"QB\" \"WR\" \"RB\" \"RB\" ... #>   ..$ roster_slot_id        : num [1:6] 511 512 512 512 512 512 #>   ..$ salary                : num [1:6] 18600 11000 8000 5400 3800 3200 #>   ..$ status                : chr [1:6] \"None\" \"None\" \"None\" \"None\" ... #>   ..$ is_swappable          : logi [1:6] FALSE FALSE FALSE FALSE FALSE FALSE #>   ..$ is_disabled           : logi [1:6] FALSE FALSE FALSE FALSE FALSE FALSE #>   ..$ news_status           : chr [1:6] \"Recent\" \"Recent\" \"Breaking\" \"Recent\" ... #>   ..$ player_image50        : chr [1:6] \"https://dkn.gs/sports/images/nfl/players/50/11370.png\" \"https://dkn.gs/sports/images/nfl/players/50/11477.png\" \"https://dkn.gs/sports/images/nfl/players/50/19614.png\" \"https://dkn.gs/sports/images/nfl/players/50/640895.png\" ... #>   ..$ player_image160       : chr [1:6] \"https://dkn.gs/sports/images/nfl/players/160/11370.png\" \"https://dkn.gs/sports/images/nfl/players/160/11477.png\" \"https://dkn.gs/sports/images/nfl/players/160/19614.png\" \"https://dkn.gs/sports/images/nfl/players/160/640895.png\" ... #>   ..$ alt_player_image50    : chr [1:6] \"\" \"\" \"\" \"\" ... #>   ..$ alt_player_image160   : chr [1:6] \"\" \"\" \"\" \"\" ... #>   ..$ team_id               : num [1:6] 324 345 345 324 345 345 #>   ..$ team_abbreviation     : chr [1:6] \"BUF\" \"MIA\" \"MIA\" \"BUF\" ... #>   ..$ player_game_hash      : chr [1:6] \"868199-5819869\" \"823156-5819869\" \"606501-5819869\" \"1131012-5819869\" ... #>   ..$ competition_id        : num [1:6] 5819869 5819869 5819869 5819869 5819869 ... #>   ..$ competition_name      : chr [1:6] \"MIA @ BUF\" \"MIA @ BUF\" \"MIA @ BUF\" \"MIA @ BUF\" ... #>   ..$ competition_start_time: chr [1:6] \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" \"2023-01-15T18:00:00.0000000Z\" ... #>   ..$ exp_fp                : num [1:6] 39 24.6 17.4 14.1 8.2 8.6 #>   ..$ is_captain            : logi [1:6] TRUE FALSE FALSE FALSE FALSE FALSE #>  $ draft_group_id: num 80584 #>  $ salary_total  : num 50000 #>  $ exp_fp_total  : num 112"},{"path":"https://gacolitti.github.io/draft.kings/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Colitti. Maintainer.","code":""},{"path":"https://gacolitti.github.io/draft.kings/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Colitti G (2024). draft.kings: Draft Kings API Wrapper Optimization. R package version 0.5.4, https://gacolitti.github.io/draft.kings.","code":"@Manual{,   title = {draft.kings: Draft Kings API Wrapper and Optimization},   author = {Giovanni Colitti},   year = {2024},   note = {R package version 0.5.4},   url = {https://gacolitti.github.io/draft.kings}, }"},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Draft Kings API Wrapper and Optimization","text":"draft.kings makes easy pull data DraftKings optimize lineups. can get current contests, fetch draftable players contest, list contest participants points contest. also functions facilitate lineup optimization using DraftKings player projections player point predictions. use DraftKings know R, package . functions contained package wrap endpoints able find inspecting Draft Kings website. DraftKings public API undocumented. find endpoint included package, please open issue.","code":""},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Draft Kings API Wrapper and Optimization","text":"can install development version draft.kings GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"gacolitti/draft.kings\") library(draft.kings)"},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"contests","dir":"","previous_headings":"","what":"Contests","title":"Draft Kings API Wrapper and Optimization","text":"","code":"dk_get_contest_info(contest_key = 133645678) #> # A tibble: 1 × 33 #>   contest_summary         payout_description is_cash_prize_only scoring_style_id #>   <chr>                   <chr>              <lgl>                         <dbl> #> 1 This 215-player contes… $5,000             TRUE                              1 #> # ℹ 29 more variables: contest_state_detail <chr>, #> #   includes_past_season_collectibles <lgl>, sport <chr>, is_guaranteed <lgl>, #> #   is_private <lgl>, is_resizable <lgl>, was_resized <lgl>, fpp_award <dbl>, #> #   sort_order <dbl>, contest_start_time <chr>, game_type_id <dbl>, #> #   ticket_only_entry <lgl>, game_set_key <chr>, contest_key <chr>, name <chr>, #> #   draft_group_id <dbl>, play_type_id <dbl>, entries <dbl>, #> #   maximum_entries <dbl>, maximum_entries_per_user <dbl>, entry_fee <dbl>, …"},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"draft-groups","dir":"","previous_headings":"","what":"Draft Groups","title":"Draft Kings API Wrapper and Optimization","text":"","code":"dk_get_draft_group_info(draft_group_id = 75284) #> $info #> # A tibble: 1 × 12 #>   draft_group_id sport_id start_time_suffix start_time_type min_start_time       #>            <int>    <int> <chr>             <chr>           <chr>                #> 1          75284        1 \" (CIN vs BAL)\"   Normal          2022-10-10T00:20:00… #> # ℹ 7 more variables: max_start_time <chr>, draft_group_state <chr>, #> #   allow_ugc <lgl>, game_type_id <int>, contest_type_id <int>, sport <chr>, #> #   game_type <chr> #>  #> $games #> # A tibble: 1 × 16 #>   game_id away_team_id home_team_id start_date    location time_remaining_status #>     <int>        <int>        <int> <chr>         <chr>    <chr>                 #> 1 5819761          327          366 2022-10-10T0… M&T Ban… Final                 #> # ℹ 10 more variables: sport <chr>, status <chr>, description <chr>, #> #   league <chr>, competition_status <chr>, competition_status_detail <chr>, #> #   sport_specific_data_time_remaining <chr>, #> #   sport_specific_data_home_team_score <chr>, #> #   sport_specific_data_away_team_score <chr>, #> #   sport_specific_data_quarter <chr> #>  #> $leagues #> # A tibble: 1 × 3 #>   league_id league_name              league_abbreviation #>       <int> <chr>                    <chr>               #> 1         1 National Football League NFL"},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"leaderboard--entries","dir":"","previous_headings":"","what":"Leaderboard & Entries","title":"Draft Kings API Wrapper and Optimization","text":"","code":"dk_get_leaderboard(contest_key = 133645678) #> # A tibble: 215 × 21 #>    draft_group_id contest_key entry_key  lineup_id user_name    user_key #>             <int> <chr>       <chr>          <int> <chr>        <chr>    #>  1          75284 133645678   3412356478        -1 GenoMike21   642864   #>  2          75284 133645678   3416201807        -1 carlitosway9 1334845  #>  3          75284 133645678   3416313295        -1 KidRaider3   5752908  #>  4          75284 133645678   3416410911        -1 carlosking89 8636059  #>  5          75284 133645678   3416034618        -1 sjamo35      8672865  #>  6          75284 133645678   3416642033        -1 Jace2013     11763756 #>  7          75284 133645678   3416680035        -1 Bucknutz00   417423   #>  8          75284 133645678   3415573084        -1 JWolff33     13692689 #>  9          75284 133645678   3416580244        -1 eracnrobert  2374855  #> 10          75284 133645678   3415480406        -1 Maria2199    3405766  #> # ℹ 205 more rows #> # ℹ 15 more variables: user_entry_count <int>, user_entry_index <int>, #> #   time_remaining <int>, time_remaining_unit <chr>, max_time_remaining <int>, #> #   time_remaining_opponent <int>, rank <int>, fantasy_points <dbl>, #> #   fantasy_points_opponent <dbl>, user_name_opponent <chr>, #> #   number_tickets_won <int>, tickets_value <int>, winning_value <int>, #> #   winnings <list>, scoring_precision <int> dk_get_entries(draft_group_id = 80584, entry_keys = c(3618408508, 3618897002)) #> # A tibble: 76 × 29 #>    contest_key entry_key  user_key draft_group_id lineup_id first_name last_name #>    <chr>       <chr>      <chr>             <int>     <int> <chr>      <chr>     #>  1 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  2 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  3 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  4 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  5 140039397   3618408508 11222656          80584        -1 Cole       Beasley   #>  6 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  7 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  8 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #>  9 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #> 10 140039397   3618408508 11222656          80584        -1 Gabe       Davis     #> # ℹ 66 more rows #> # ℹ 22 more variables: short_name <chr>, display_name <chr>, #> #   roster_position_id <int>, roster_position <chr>, #> #   roster_position_sort_order <int>, e_tag <chr>, percent_drafted <dbl>, #> #   draftable_id <int>, score <dbl>, stats_description <chr>, #> #   time_remaining_unit <chr>, time_remaining <int>, max_time_remaining <int>, #> #   percent_drafted_cp <chr>, player_deep_link <chr>, …"},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"lineup-optimization","dir":"","previous_headings":"","what":"Lineup Optimization","title":"Draft Kings API Wrapper and Optimization","text":"","code":"# prepare schematic with contest rules and DraftKings player projections schematic <- dk_prepare_schematic(draft_group_id = 80584)  # run optimization optimized_lineup <- dk_optimize_lineup(schematic)  # extract solution dk_extract_solution(optimized_lineup) #> $optimal_lineup #>   draftable_id first_name last_name   display_name short_name player_id #> 1     26368922       Josh     Allen     Josh Allen   J. Allen    868199 #> 2     26368976     Tyreek      Hill    Tyreek Hill    T. Hill    823156 #> 3     26368982     Raheem   Mostert Raheem Mostert R. Mostert    606501 #> 4     26368990      James      Cook     James Cook    J. Cook   1131012 #> 5     26368996      Jason   Sanders  Jason Sanders J. Sanders    821895 #> 6     26368997   Dolphins                 Dolphins   Dolphins       345 #>   player_dk_id position roster_slot_id salary status is_swappable is_disabled #> 1        11370       QB            511  18600   None        FALSE       FALSE #> 2        11477       WR            512  11000   None        FALSE       FALSE #> 3        19614       RB            512   8000   None        FALSE       FALSE #> 4       640895       RB            512   5400   None        FALSE       FALSE #> 5        14871        K            512   3800   None        FALSE       FALSE #> 6        18401      DST            512   3200   None        FALSE       FALSE #>   news_status                                         player_image50 #> 1      Recent  https://dkn.gs/sports/images/nfl/players/50/11370.png #> 2      Recent  https://dkn.gs/sports/images/nfl/players/50/11477.png #> 3    Breaking  https://dkn.gs/sports/images/nfl/players/50/19614.png #> 4      Recent https://dkn.gs/sports/images/nfl/players/50/640895.png #> 5        None  https://dkn.gs/sports/images/nfl/players/50/14871.png #> 6        <NA>    https://dkn.gs/sports/images/nfl/teams/50/18401.png #>                                           player_image160 alt_player_image50 #> 1  https://dkn.gs/sports/images/nfl/players/160/11370.png                    #> 2  https://dkn.gs/sports/images/nfl/players/160/11477.png                    #> 3  https://dkn.gs/sports/images/nfl/players/160/19614.png                    #> 4 https://dkn.gs/sports/images/nfl/players/160/640895.png                    #> 5  https://dkn.gs/sports/images/nfl/players/160/14871.png                    #> 6    https://dkn.gs/sports/images/nfl/teams/160/18401.png                    #>   alt_player_image160 team_id team_abbreviation player_game_hash competition_id #> 1                         324               BUF   868199-5819869        5819869 #> 2                         345               MIA   823156-5819869        5819869 #> 3                         345               MIA   606501-5819869        5819869 #> 4                         324               BUF  1131012-5819869        5819869 #> 5                         345               MIA   821895-5819869        5819869 #> 6                         345               MIA      345-5819869        5819869 #>   competition_name       competition_start_time exp_fp is_captain #> 1        MIA @ BUF 2023-01-15T18:00:00.0000000Z   39.0       TRUE #> 2        MIA @ BUF 2023-01-15T18:00:00.0000000Z   24.6      FALSE #> 3        MIA @ BUF 2023-01-15T18:00:00.0000000Z   17.4      FALSE #> 4        MIA @ BUF 2023-01-15T18:00:00.0000000Z   14.1      FALSE #> 5        MIA @ BUF 2023-01-15T18:00:00.0000000Z    8.2      FALSE #> 6        MIA @ BUF 2023-01-15T18:00:00.0000000Z    8.6      FALSE #>  #> $draft_group_id #> [1] 80584 #>  #> $salary_total #> [1] 50000 #>  #> $exp_fp_total #> [1] 111.9"},{"path":"https://gacolitti.github.io/draft.kings/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further Reading","title":"Draft Kings API Wrapper and Optimization","text":"SeanDrum/Draft-Kings-API-Documentation","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_curl_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Curl Options — add_curl_options","title":"Add Curl Options — add_curl_options","text":"Add list curl arguments request object","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_curl_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Curl Options — add_curl_options","text":"","code":"add_curl_options(req, curl_options)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_curl_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Curl Options — add_curl_options","text":"req request. curl_options List arguments httr2::req_options","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_error_handling.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Error Handling — add_error_handling","title":"Add Error Handling — add_error_handling","text":"Add list arguments request object errors occur message extracted.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_error_handling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Error Handling — add_error_handling","text":"","code":"add_error_handling(req, error_handling_options = NULL)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_error_handling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Error Handling — add_error_handling","text":"req request. error_handling_options List arguments httr2::req_error()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Headers — add_headers","title":"Add Headers — add_headers","text":"Add list arguments httr2::req_headers request object","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Headers — add_headers","text":"","code":"add_headers(req, headers)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Headers — add_headers","text":"req request. headers List arguments httr2::req_headers()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Proxy Args — add_proxy","title":"Add Proxy Args — add_proxy","text":"Add list proxy arguments request object","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Proxy Args — add_proxy","text":"","code":"add_proxy(req, proxy_args)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Proxy Args — add_proxy","text":"req request. proxy_args List arguments httr2::req_proxy","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Retry — add_retry","title":"Add Retry — add_retry","text":"Add list arguments request object control request retried","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Retry — add_retry","text":"","code":"add_retry(req, retry_options)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Retry — add_retry","text":"req request. retry_options List arguments passed httr2::req_retry()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Throttle — add_throttle","title":"Add Throttle — add_throttle","text":"Add list throttle arguments request object","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_throttle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Throttle — add_throttle","text":"","code":"add_throttle(req, throttle_rate)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_throttle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Throttle — add_throttle","text":"req request. throttle_rate List arguments httr2::req_throttle","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_to_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Add To URL Path — add_to_path","title":"Add To URL Path — add_to_path","text":"Add URL Path","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/add_to_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add To URL Path — add_to_path","text":"","code":"add_to_path(req, paths)"},{"path":"https://gacolitti.github.io/draft.kings/reference/add_to_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add To URL Path — add_to_path","text":"req request. paths List arguments httr2::req_url_path_append()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","title":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","text":"function checks classes data frame allows certain columns multiple allowed classes.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","text":"","code":"check_df(df, class_list)"},{"path":"https://gacolitti.github.io/draft.kings/reference/check_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","text":"df data frame check class_list named list specifies expected classes column class_list argument named list, names correspond column names df. entry list character vector allowed classes corresponding column. example, class_list = list(col1 = \"numeric\", col2 = c(\"character\", \"factor\"), col3 = \"logical\") specifies col1 must class \"numeric\", col2 must class \"character\" \"factor\", col3 must class \"logical\".","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","text":"checked data frame","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the classes of a data frame and allow for multiple different classes for certain columns — check_df","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(   col1 = c(1, 2, 3),   col2 = c(\"a\", \"b\", \"c\"),   col3 = c(TRUE, FALSE, TRUE),   stringsAsFactors = FALSE )  class_list <- list(   col1 = \"numeric\",   col2 = c(\"character\", \"factor\"),   col3 = \"logical\" )  check_df(df, class_list) } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/check_draft_group_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Draft Group Inputs — check_draft_group_id","title":"Check Draft Group Inputs — check_draft_group_id","text":"Use either draft_group_id contest_key draft_group_id NULL.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_draft_group_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Draft Group Inputs — check_draft_group_id","text":"","code":"check_draft_group_id(draft_group_id = NULL, contest_key = NULL)"},{"path":"https://gacolitti.github.io/draft.kings/reference/check_draft_group_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Draft Group Inputs — check_draft_group_id","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_solver.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Solver — check_solver","title":"Check Solver — check_solver","text":"Ensure solver name passed dk_optimize_lineup available","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/check_solver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Solver — check_solver","text":"","code":"check_solver(solver)"},{"path":"https://gacolitti.github.io/draft.kings/reference/check_solver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Solver — check_solver","text":"solver string solver name.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean table or vector of names — clean_names","title":"Clean table or vector of names — clean_names","text":"Clean table vector names","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean table or vector of names — clean_names","text":"","code":"clean_names(.data, unique = FALSE, minus_to_underscore = FALSE)"},{"path":"https://gacolitti.github.io/draft.kings/reference/clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean table or vector of names — clean_names","text":".data Data.frame vector column names. unique variable names unique? minus_to_underscore default - replaced minus. argument replaces hyphen _ (underscore) instead.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean table or vector of names — clean_names","text":"Returns vector vector data.frame data.frame.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_extract_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Solution — dk_extract_solution","title":"Extract Solution — dk_extract_solution","text":"Extract information optimized lineup solution","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_extract_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Solution — dk_extract_solution","text":"","code":"dk_extract_solution(x)"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_extract_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Solution — dk_extract_solution","text":"x Optimal lineup object created dk_optimize_lineup().","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_competitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Competitions for a Draft Group — dk_get_competitions","title":"Get Competitions for a Draft Group — dk_get_competitions","text":"Fetch information competitions associated specific draft group ID. particular, includes home/away team designation, team IDs, sport name.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_competitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Competitions for a Draft Group — dk_get_competitions","text":"","code":"dk_get_competitions(   draft_group_id = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_competitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Competitions for a Draft Group — dk_get_competitions","text":"draft_group_id Sequence digits correspond draft table/group. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_competitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Competitions for a Draft Group — dk_get_competitions","text":"","code":"if (FALSE) { # \\dontrun{     # NFL Showdown Captain Mode     dk_get_competitions(75284)      # NFL Classic     dk_get_competitions(74625)      # Multiple competitions     dk_get_competition(42994)   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_contest_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Contest Info — dk_get_contest_info","title":"Get Contest Info — dk_get_contest_info","text":"Fetch contest information sport, payout, contest summary.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_contest_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Contest Info — dk_get_contest_info","text":"","code":"dk_get_contest_info(   contest_key,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_contest_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Contest Info — dk_get_contest_info","text":"contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_contest_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Contest Info — dk_get_contest_info","text":"","code":"if (FALSE) { # \\dontrun{     dk_get_contest_info(133645678)   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft group — dk_get_draft_group","title":"Get Draft group — dk_get_draft_group","text":"Fetch information available players specific draft group ID. particular, includes player names/IDs salaries.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft group — dk_get_draft_group","text":"","code":"dk_get_draft_group(   draft_group_id = NULL,   contest_key = NULL,   draftable_ids = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft group — dk_get_draft_group","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. draftable_ids Unique draftable IDs filter . NULL (default), draftable IDs included result. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft group — dk_get_draft_group","text":"","code":"if (FALSE) { # \\dontrun{     # NFL Showdown Captain Mode     dk_get_draft_group(75284)      # NFL Classic     dk_get_draft_group(74625)   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft Group Info — dk_get_draft_group_info","title":"Get Draft Group Info — dk_get_draft_group_info","text":"Fetch info specific draft group","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft Group Info — dk_get_draft_group_info","text":"","code":"dk_get_draft_group_info(   draft_group_id = NULL,   contest_key = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft Group Info — dk_get_draft_group_info","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft Group Info — dk_get_draft_group_info","text":"","code":"if (FALSE) { # \\dontrun{   dk_get_draft_group_info(75284)  } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Additional Draft Group Info — dk_get_draft_group_info2","title":"Get Additional Draft Group Info — dk_get_draft_group_info2","text":"Fetch additional info specific draft group","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Additional Draft Group Info — dk_get_draft_group_info2","text":"","code":"dk_get_draft_group_info2(   draft_group_ids = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Additional Draft Group Info — dk_get_draft_group_info2","text":"draft_group_ids One draft group IDs. See dk_get_draft_group(). output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_draft_group_info2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Additional Draft Group Info — dk_get_draft_group_info2","text":"","code":"if (FALSE) { # \\dontrun{   dk_get_draft_group_info2(c(75284, 24180))  } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Entry Details — dk_get_entries","title":"Get Entry Details — dk_get_entries","text":"Fetch details entries contest, including drafted roster entry, stats player entry roster, fantasy points associated stat.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Entry Details — dk_get_entries","text":"","code":"dk_get_entries(   draft_group_id,   entry_keys,   iv = Sys.getenv(\"DK_IV\"),   jwe = Sys.getenv(\"DK_JWE\"),   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Entry Details — dk_get_entries","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. entry_keys Vector numeric (character) keys correspond specific entry specific contest. See output dk_get_leaderboard(). iv Character string. 'iv' cookie value. provided, retrieved DK_IV environment variable. jwe Character string. 'jwe' cookie value. provided, retrieved DK_JWE environment variable. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Entry Details — dk_get_entries","text":"","code":"if (FALSE) { # \\dontrun{     dk_get_entries(draft_group_id = 80584, entry_keys = c(3618408508, 3618897002))   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_game_type_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gametype Rules — dk_get_game_type_rules","title":"Get Gametype Rules — dk_get_game_type_rules","text":"Fetch rules corresponding specific game type ID.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_game_type_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gametype Rules — dk_get_game_type_rules","text":"","code":"dk_get_game_type_rules(   game_type_id = NULL,   contest_key = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_game_type_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gametype Rules — dk_get_game_type_rules","text":"game_type_id Integer corresponding game type. example, 159 https://api.draftkings.com/lineups/v1/gametypes/159/rules. game_type_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_leaderboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Leaderboard — dk_get_leaderboard","title":"Get Leaderboard — dk_get_leaderboard","text":"Fetch leaderboard contest. leaderboard contains list entries contest, fantasy points entry, associated user entry, rank, winnings.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_leaderboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Leaderboard — dk_get_leaderboard","text":"","code":"dk_get_leaderboard(   contest_key,   iv = Sys.getenv(\"DK_IV\"),   jwe = Sys.getenv(\"DK_JWE\"),   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_leaderboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Leaderboard — dk_get_leaderboard","text":"contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. iv Character string. 'iv' cookie value. provided, retrieved DK_IV environment variable. jwe Character string. 'jwe' cookie value. provided, retrieved DK_JWE environment variable. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_leaderboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Leaderboard — dk_get_leaderboard","text":"","code":"if (FALSE) { # \\dontrun{     dk_get_leaderboard(133645678)   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_contests.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List of Contests in Lobby — dk_get_lobby_contests","title":"Get List of Contests in Lobby — dk_get_lobby_contests","text":"Fetch full table contests related info DraftKings.com lobby","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_contests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List of Contests in Lobby — dk_get_lobby_contests","text":"","code":"dk_get_lobby_contests(   sport = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_contests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List of Contests in Lobby — dk_get_lobby_contests","text":"sport character. optional. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_draft_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List of Draft Groups in Lobby — dk_get_lobby_draft_groups","title":"Get List of Draft Groups in Lobby — dk_get_lobby_draft_groups","text":"Fetch full table draft groups related info currently present www.draftkings.com/lobby.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_draft_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List of Draft Groups in Lobby — dk_get_lobby_draft_groups","text":"","code":"dk_get_lobby_draft_groups(   sport = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_draft_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List of Draft Groups in Lobby — dk_get_lobby_draft_groups","text":"sport character. optional. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_game_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List of Game Types in Lobby — dk_get_lobby_game_types","title":"Get List of Game Types in Lobby — dk_get_lobby_game_types","text":"Fetch full list game types","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_game_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List of Game Types in Lobby — dk_get_lobby_game_types","text":"","code":"dk_get_lobby_game_types(   sport = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_lobby_game_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List of Game Types in Lobby — dk_get_lobby_game_types","text":"sport character. optional. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_optimal_lineups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Multiple Optimal Lineups — dk_get_optimal_lineups","title":"Get Multiple Optimal Lineups — dk_get_optimal_lineups","text":"Wrapper around dk_optimize_lineup(). Can return arbitrary number optimal lineups succession.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_optimal_lineups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Multiple Optimal Lineups — dk_get_optimal_lineups","text":"","code":"dk_get_optimal_lineups(schematic, n = 1, tolerance = 0.001)"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_optimal_lineups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Multiple Optimal Lineups — dk_get_optimal_lineups","text":"schematic Output dk_prepare_schematic() includes information needed optimization; including player info , news status, salary, projected fantasy points. n Number lineups return. tolerance difference fantasy points previous optimal lineup current optimal lineup iterations. Usually default 0.001 fine.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_fp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Player Fantasy Points Earned — dk_get_player_fp","title":"Get Player Fantasy Points Earned — dk_get_player_fp","text":"Retrieve player fantasy points earned game given season week (NFL) date (NBA/MLB).","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_fp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Player Fantasy Points Earned — dk_get_player_fp","text":"","code":"dk_get_player_fp(   timeframe,   season = as.numeric(format(Sys.Date(), \"%Y\")),   sport = c(\"nfl\", \"nba\", \"mlb\"),   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_fp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Player Fantasy Points Earned — dk_get_player_fp","text":"timeframe integer. Either week number NFL, date form 20230312 MLB NBA. timeframe format detected match sport argument passed, error returned. season integer. optional. Defaults current season year. sport character. Defaults NFL. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_fp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Player Fantasy Points Earned — dk_get_player_fp","text":"Data starts October 18th, 2022 NBA.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Player List — dk_get_player_list","title":"Get Player List — dk_get_player_list","text":"Fetch list players related info specific draft group.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Player List — dk_get_player_list","text":"","code":"dk_get_player_list(   draft_group_id = NULL,   contest_key = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Player List — dk_get_player_list","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_player_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Player List — dk_get_player_list","text":"","code":"if (FALSE) { # \\dontrun{   dk_get_player_list(75284)  } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_sports.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sports — dk_get_sports","title":"Get Sports — dk_get_sports","text":"Fetch list sport names IDs.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_sports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sports — dk_get_sports","text":"","code":"dk_get_sports(   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_sports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sports — dk_get_sports","text":"output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_sports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Sports — dk_get_sports","text":"","code":"if (FALSE) { # \\dontrun{     dk_get_sports()   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_team_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Team List — dk_get_team_list","title":"Get Team List — dk_get_team_list","text":"Fetch list teams specific draft group.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_team_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Team List — dk_get_team_list","text":"","code":"dk_get_team_list(   draft_group_id = NULL,   contest_key = NULL,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   process_args = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_get_team_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Team List — dk_get_team_list","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. contest_key sequence digits correspond specific contest. can found examining URL contest page. example: https://www.draftkings.com/draft/contest/133645678#. contest ID 133645678. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, process_args Optional list arguments passed dk_req_process ... Arguments passed dk_req query_params list query parameters passed [httr2::req_url_query]. proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() error_handling_options List arguments httr2::req_error() retry_options List arguments passed httr2::req_retry() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_optimize_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Lineup — dk_optimize_lineup","title":"Optimize Lineup — dk_optimize_lineup","text":"Get optimal players based player pool, projected fantasy points, rules defined schematic. See dk_prepare_schematic(). Determine optimal lineup players based list available players, salaries, projected fantasy points showdown captain mode game type. Determine optimal lineup players based list available players, salaries, projected fantasy points classic game type.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_optimize_lineup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Lineup — dk_optimize_lineup","text":"","code":"dk_optimize_lineup(schematic, max_points, solver = \"glpk\", ...)  # S3 method for class 'showdown_captain_mode' dk_optimize_lineup(schematic, max_points = NULL, solver = \"glpk\", ...)  # S3 method for class 'classic' dk_optimize_lineup(schematic, max_points = NULL, solver = \"glpk\", ...)"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_optimize_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Lineup — dk_optimize_lineup","text":"schematic Output dk_prepare_schematic() includes information needed optimization; including player info , news status, salary, projected fantasy points. max_points Optional upper threshold points. used primarily get many successive lineups dk_get_optimal_lineups() solver 'ROI' solver name (character vector length 1) ... arguments passed optimization method.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_prepare_schematic.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Schematic — dk_prepare_schematic","title":"Prepare Schematic — dk_prepare_schematic","text":"Combine information needed optimization. Passed dk_optimize().","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_prepare_schematic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Schematic — dk_prepare_schematic","text":"","code":"dk_prepare_schematic(   draft_group_id,   draft_group_exp_fp = NULL,   draft_group = NULL,   rules = NULL,   include_players = NULL,   exclude_players = NULL,   exclude_questionable = FALSE )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_prepare_schematic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Schematic — dk_prepare_schematic","text":"draft_group_id Sequence digits correspond draft table/group. draft_group_id contest_key passed, contest_key ignored. draft_group_exp_fp data.frame two columns draftable_id (found output get_draftable_players()) exp_fp (expected fantasy points). Note Showdown Captain Mode game type includes two rows player/defense. draft_group contains rows found draft_group_exp_fp, warning issued missing rows dropped. NULL (default), exp_fp exist draft_group, exp_fp set equal ppg value returned get_player_list(). draft_group Object returned get_draftable_players(). NULL (default), object fetched using draft_group_id. following columns required: draftable_id, player_id, first_name, last_name, display_name, salary, team_id, status. rules Object returned get_gametype_rules(). NULL (default), rules fetched using draft_group_id. include_players vector player IDs include. NULL (default), use players found get_draftable_players(). exclude_players vector player IDs exclude. exclude_questionable Exclude players statuses indicate play. include players questionable, doubtful, , injured. Default FALSE.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_prepare_schematic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Schematic — dk_prepare_schematic","text":"","code":"if (FALSE) { # \\dontrun{     dk_prepare_schematic(draft_group_id = 80584)   } # }"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Draft Kings Request Object — dk_req","title":"Create Draft Kings Request Object — dk_req","text":"Create Draft Kings Request Object","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Draft Kings Request Object — dk_req","text":"","code":"dk_req(   proxy_args = NULL,   curl_options = NULL,   throttle_rate = NULL,   headers = NULL,   paths = NULL,   query_params = NULL,   retry_options = NULL,   error_handling_options = NULL,   base_url = \"https://api.draftkings.com/\",   method = \"GET\" )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Draft Kings Request Object — dk_req","text":"proxy_args List arguments httr2::req_proxy curl_options List arguments httr2::req_options throttle_rate List arguments httr2::req_throttle headers List arguments httr2::req_headers() paths List arguments httr2::req_url_path_append() query_params list query parameters passed [httr2::req_url_query]. retry_options List arguments passed httr2::req_retry() error_handling_options List arguments httr2::req_error() base_url Base URL request. method Custom HTTP method","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Draft Kings API Request — dk_req_perform","title":"Perform Draft Kings API Request — dk_req_perform","text":"Wrapper around httr2::req_perform() sends API request fetches response body. Also, adds relevant object class use parsing functions; See dk_resp_parse().","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Draft Kings API Request — dk_req_perform","text":"","code":"dk_req_perform(   req,   path = NULL,   verbosity = NULL,   mock = getOption(\"httr2_mock\", NULL),   output = c(\"json\", \"response\"),   objclass = NULL )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Draft Kings API Request — dk_req_perform","text":"req request. path Optionally, path save body response. useful large responses since avoids storing response memory. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly. mock mocking function. supplied, function called request. return either NULL (want handle request) response (). See with_mock()/ local_mock() details. output One 'json' 'response'. objclass character. Name class assign output object. Default NULL, additional class assigned. Used facilitate parsing; See dk_resp_parse().","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Draft Kings Request Object — dk_req_process","title":"Process Draft Kings Request Object — dk_req_process","text":"Wrapper facilitate request processed based desired output.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Draft Kings Request Object — dk_req_process","text":"","code":"dk_req_process(   req,   output = c(\"cleaned_json\", \"json\", \"response\", \"request\"),   objclass = NULL,   ... )"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Draft Kings Request Object — dk_req_process","text":"req request. output One \"cleaned_json\" (default), \"json\", \"response\", \"request\". \"cleaned_json\" tidyjson::spread_all() used parse JSON body, objclass character. Name class assign output object. Default NULL, additional class assigned. Used facilitate parsing; See dk_resp_parse(). ... arguments passed dk_req_perform()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_req_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Draft Kings Request Object — dk_req_process","text":"See output.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_resp_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Response JSON — dk_resp_parse","title":"Parse Response JSON — dk_resp_parse","text":"Parse Response JSON","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_resp_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Response JSON — dk_resp_parse","text":"","code":"dk_resp_parse(resp)"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_resp_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Response JSON — dk_resp_parse","text":"resp response object.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Lineups to CSV — dk_write_csv","title":"Write Lineups to CSV — dk_write_csv","text":"Create CSV optimal lineups can uploaded https://www.draftkings.com/lineup/upload. Given output dk_get_optimal_lineups(), create CSV Showdown Captain Mode lineups formatted uplaod https://www.draftkings.com/lineup/upload.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Lineups to CSV — dk_write_csv","text":"","code":"dk_write_csv(optimal_lineups, file, ...)  # S3 method for class 'showdown_captain_mode_multiple_solutions' dk_write_csv(optimal_lineups, file = \"showdown_captain_mode_lineups.csv\", ...)"},{"path":"https://gacolitti.github.io/draft.kings/reference/dk_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Lineups to CSV — dk_write_csv","text":"optimal_lineups Output dk_get_optimal_lineups() file Path name CSV file create ... args passed utils::write.csv()","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/draft.kings-package.html","id":null,"dir":"Reference","previous_headings":"","what":"draft.kings: Draft Kings API Wrapper and Optimization — draft.kings-package","title":"draft.kings: Draft Kings API Wrapper and Optimization — draft.kings-package","text":"Fetch data DraftKings using provided API perform lineup optimization.","code":""},{"path":[]},{"path":"https://gacolitti.github.io/draft.kings/reference/format_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a time duration into a human-readable time format — format_duration","title":"Format a time duration into a human-readable time format — format_duration","text":"Format time duration human-readable time format","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/format_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a time duration into a human-readable time format — format_duration","text":"","code":"format_duration(start_time, end_time = NULL)"},{"path":"https://gacolitti.github.io/draft.kings/reference/format_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a time duration into a human-readable time format — format_duration","text":"start_time POSIXct value representing start time duration end_time POSIXct value representing end time duration (default NULL, sets end time current system time)","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/format_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a time duration into a human-readable time format — format_duration","text":"character string representing formatted duration","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/format_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a given number of seconds into a human-readable time format — format_time","title":"Format a given number of seconds into a human-readable time format — format_time","text":"Format given number seconds human-readable time format","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/format_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a given number of seconds into a human-readable time format — format_time","text":"","code":"format_time(seconds, digits = 1)"},{"path":"https://gacolitti.github.io/draft.kings/reference/format_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a given number of seconds into a human-readable time format — format_time","text":"seconds numeric value representing number seconds format digits integer value indicating number digits decimal point round (default 1)","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/format_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a given number of seconds into a human-readable time format — format_time","text":"character string representing formatted time","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://gacolitti.github.io/draft.kings/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pretty_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","title":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","text":"function takes start end time inputs outputs pretty formatted duration seconds, minutes, hours, days.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pretty_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","text":"","code":"pretty_duration(start_time, end_time = Sys.time(), prefix = NULL)"},{"path":"https://gacolitti.github.io/draft.kings/reference/pretty_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","text":"start_time start time POSIXct object. end_time end time POSIXct object. prefix Optional text include duration.","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pretty_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","text":"character string representing duration start end time, formatted integer followed appropriate time unit (e.g. \"1 day\", \"30 minutes\", \"5 seconds\").","code":""},{"path":"https://gacolitti.github.io/draft.kings/reference/pretty_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format duration between two times in seconds, minutes, hours, or days — pretty_duration","text":"","code":"if (FALSE) { # \\dontrun{ start_time <- as.POSIXct(\"2023-03-17 12:00:00\", tz = \"UTC\") end_time <- as.POSIXct(\"2023-03-18 12:30:45\", tz = \"UTC\") pretty_duration(start_time, end_time) } # }"},{"path":"https://gacolitti.github.io/draft.kings/news/index.html","id":"draftkings-054","dir":"Changelog","previous_headings":"","what":"draft.kings 0.5.4","title":"draft.kings 0.5.4","text":"Added pkgdown site udpated README Removed dk_get() dk_multi_get() Renamed functions like dk_request_*() dk_req_*() Renamed functions like dk_response_*() dk_resp_*() Replaced cookies_file argument iv jwe arguments functions require DraftKings session cookies","code":""}]
